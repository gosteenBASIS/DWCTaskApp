REM /**
REM  * TaskCardView.bbj
REM  * @author gosteen, ndecker, bhighhill
REM  * Task-Card-View.bbj
REM  * TaskCardView represents the childwindow of a task view
REM  */

class public TaskCardView extends TaskView
    field protected BBjButton       btnDeleteTask!
    field protected BBjButton       btnLock!
    field protected BBjButton       btnSetComplete!
    field protected BBjString       lock! = "<html><dwc-icon pool='tabler' name='lock' style='width: 30px; height: 30px'></dwc-icon>"
    field protected BBjString       lockOpen! = "<html><dwc-icon pool='tabler' name='lock-open' style='width: 30px; height: 30px'></dwc-icon>"
    field protected BBjString       trashIcon! = "<html><dwc-icon pool='tabler' name='trash' style='width: 25px; height: 25px'></dwc-icon>"
    field protected BBjStaticText   status!

    rem /**
    rem  * Creates a task card view for every task
    rem  *
    rem  * @param parent!, t!           parent! is the parent window which contains all task child windows of a given view, t! is the Task that is to be added to a given view
    rem  */
    method public TaskCardView(BBjWindow parent!, Task t!)
        #super!(parent!,t!)
        #win!.addClass("winCardView")

REM         #win!.addClass("status-" + #task!.getStatusString(#task!.getStatus()))
        #status! = #win!.addStaticText("")
        #status!.addClass("textStatus")
REM         if (#task!.getDueDate() = -1 AND #task!.getComplete() = 0) then #status! = #win!.addStaticText("")
        if (#task!.getComplete()) then #status!.setText("Date of Completion")

        if (#task!.getComplete() = 0) then
            #createPopupMenu()
            #priorityFlag!.setPopupMenu(#flagPopupMenu!)
            #setPriorityFlag()

            if (#task!.getDueDate() > -1) then
                #status!.setText("Status: " + #task!.getStatusString(#task!.getStatus()))
            endif
        else
            #btnLock! = #win!.addButton(#lock!)
            #win!.setUserData(#btnLock!)
            #btnLock!.addClass("card-btn-lock")
            #btnLock!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "setLock")
        endif

        #title!.addClass("textTitle")


        if (#task!.getComplete() = 0) then
            #btnSetComplete! = #win!.addButton("Mark as Complete")
        else
            #btnSetComplete! = #win!.addButton("Mark as Incomplete")
        endif

        #btnSetComplete!.addClass("card-btn-complete-incomplete")
        #btnSetComplete!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "setComplete")

        #btnDeleteTask! = #win!.addButton(#trashIcon!)
        #btnDeleteTask!.addClass("card-btn-delete-task")
        #btnDeleteTask!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "onDelete")

        #refresh()
    methodend

    rem /**
    rem  * - Updates task data on refresh
    rem  */
    method public void refresh()
        #super!.refresh()

        if (#task!.getComplete()) then
            #win!.removeClass("card-task")
            #win!.addClass("card-task-complete")
            #win!.setToolTipText("Unlock to edit task")
        else
            #win!.setToolTipText("Click to edit task")
        endif

        #description!.setToolTipText(#task!.getDescription())
        #title!.setToolTipText(#task!.getTitle())

REM         #win!.addClass(#task!.getStatusString(#task!.getStatus()))
        if (#task!.getComplete() = 0) then #status!.setText("Status: " + #task!.getStatusString(#task!.getStatus()))
        if (#task!.getComplete()) then #status!.setText("Date of Completion")

        #win!.addClass("status-" + #task!.getStatusString(#task!.getStatus()))
    methodend

    rem /**
    rem  * If task is incomplete:
    rem  * - If a task is past due, adds a "Past Due!" notice
    rem  * - If a task is due today, adds a "Due Today!" notice
    rem  * - Otherwise, adds the task's due date
    rem  * - Notices are set to BBjStaticText #due!
    rem  *
    rem  * If task is complete:
    rem  * - adds the date of completion
    rem  * - Completion date is set to BBjStaticText #status!
    rem  */
    method public void setDueNotice()
        #super!.setDueNotice()
        dueDate! = date(#task!.getDueDate():"%Dl, %Ml %D")
        due! = ""

        if (#task!.getComplete() = 0) then
            if (#task!.getDueDate() > -1 AND #task!.getDueDate() > jul(date(0))) then
                due! = "Due " + STR(dueDate!)
                #due!.setText(due!)
                #due!.addClass("dueDate")
            endif
        endif

        if (#task!.getComplete()) then
            #status!.setText("Date of Completion")
            #status!.addClass("card-status-display")
        endif

    methodend

    rem /**
    rem  * - Toggles a completed task lock icon between open and closed
    rem  * - Icon is set to BBjStaticText #btnLock!
    rem  * - Toggles associated classes
    rem  *
    rem  * @param e!      The BBjButtonPushEvent that causes this method to be executed
    rem  */
    method public void setLock(BBjButtonPushEvent e!)
        if (#btnLock!.getText() = #lock!) then
            #btnLock!.setText(#lockOpen!)
            #btnLock!.removeClass("card-btn-lock")
            #btnLock!.addClass("card-btn-lock-open")
            #win!.removeClass("card-task-complete")
            #win!.addClass("card-task")
            #win!.setToolTipText("Click to edit task")
        else
            #btnLock!.setText(#lock!)
            #btnLock!.removeClass("card-btn-lock-open")
            #btnLock!.addClass("card-btn-lock")
            #win!.removeClass("card-task")
            #win!.addClass("card-task-complete")
            #win!.setToolTipText("Unlock to edit task")
        endif
    methodend

    rem /**
    rem  * - Toggles the status of a task between complete and incomplete
    rem  * - Toggles the BBjButton btnTaskCompletion! text between "Mark as Complete" & "Mark as Incomplete"
    rem  * - toggles associated classes
    rem  *
    rem  * @param e!      The BBjButtonPushEvent that causes this method to be executed
    rem  */
    method public void setComplete(BBjButtonPushEvent e!)
         btnTaskCompletion! = e!.getControl()

        if (#task!.getComplete()) then
            #task!.setStatus(#task!.STATUS_INCOMPLETE())
            btnTaskCompletion!.setText("Mark as Complete")
            #win!.removeClass("card-status-complete")
            if (#priorityFlag! <> null()) then #priorityFlag!.removeClass("priority-transparent")
            if (#btnLock! <> null()) then
                #btnLock!.removeClass("card-btn-lock")
                #btnLock!.addClass("card-btn-lock-open")
                #btnLock!.setText(#lockOpen!)
                #win!.removeClass("card-task-complete")
                #win!.addClass("card-task")
            endif
        else
            #task!.setStatus(#task!.STATUS_COMPLETE())
            btnTaskCompletion!.setText("Mark as Incomplete")
            #win!.addClass("card-status-complete")
            if (#priorityFlag! <> null()) then #priorityFlag!.addClass("priority-transparent")
            if (#btnLock! <> null()) then
                #btnLock!.addClass("card-btn-lock")
                #btnLock!.removeClass("card-btn-lock-open")
                #btnLock!.setText(#lock!)
                #win!.removeClass("card-task")
                #win!.addClass("card-task-complete")
            endif
        endif
        BBjAPI().postCustomEvent("TASK_UPDATE",#task!)
    methodend

    rem /**
    rem  * Triggers message box which prompts user for confirmation before deleting a task
    rem  *
    rem  * @param e!      The BBjButtonPushEvent that causes this method to be executed
    rem  */
    method public void onDelete(BBjButtonPushEvent e!)
        i = msgbox("This won't do anything yet", BBjSysGui.MSGBOX_BUTTONS_YES_NO + BBjSysGui.MSGBOX_ICON_EXCLAMATION, "Delete Task")
    methodend
classend

use ::Task.bbj::Task
use ::TaskView.bbj::TaskView
use ::TaskApp.bbj::TaskApp