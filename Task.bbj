rem /**
rem  * Task.bbj
rem  * @author gosteen, ndecker
rem  *
rem  */
rem package TaskApp


rem Test program that creates a task and prints out its details
declare auto Task t!
t! = new Task("My First Task")
t!.printDetails()
end


rem /**
rem  * Defines the data structure for a task in the TaskApp
rem  */
class public Task

    rem Public Fields
    rem ========================================


    rem Protected Fields
    rem ========================================
    rem /** The title of the task. */
    field protected BBjString title!

    rem /** The description of the task. */
    field protected BBjString description!

    rem /** The unique auto-generated ID for the task that may be used to distinguish between instances of the class. */
    field protected BBjString uuid!

    rem Can we do enums in BBj? Should status just be a boolean isComplete to start with?
    rem /** The status of the task that denotes whether the task is complete or not. */
    field protected BBjNumber status!

    rem Is a "number" the best way to do priority? It should be restricted to certain values.
    rem /** The priority of the task as a numeric that goes from 1 to 5, where 1 = lowest priority and 5 = highest priority. */
    field protected BBjNumber priority!

    rem /** The due date for the task. */
    field protected java.util.Date dueDate!

    rem /** The instant in time that the user created the task */
    field protected Instant created!

    rem /** The SQL timestamp version of the instant in time that the user created the task */
    field protected Timestamp createdTimestamp!

    rem Constants
    rem ========================================
    rem /** A constant value that's used to set the Task's status to incomplete (to do) */
    method public static BBjNumber STATUS_INCOMPLETE()
        methodret 0
    methodend
    rem /** A constant value that's used to set the Task's status to complete (finished or done) */
    method public static BBjNumber STATUS_COMPLETE()
        methodret 1
    methodend
    rem /** A constant value that's used to set the Task's status to deffered (on hold) */
    method public static BBjNumber STATUS_DEFFERRED()
        methodret 2
    methodend
    rem /** A constant value that's used to set the Task's status to blocked (can not complete this task until a prerequisite has been completed) */
    method public static BBjNumber STATUS_BLOCKED()
        methodret 3
    methodend

    rem /** A constant value that represents the minimum allowed priority value */
    method public static BBjNumber PRIORITY_MIN()
        methodret 0
    methodend

    rem /** A constant value that represents the maximum allowed priority value */
    method public static BBjNumber PRIORITY_MAX()
        methodret 5
    methodend

    rem Constructors
    rem ========================================
    rem /**
    rem  * A Task item's constructor that only takes a title parameter. All other parameters will be set to their default values.
    rem  *
    rem  * @param title!            The task's title string
    rem  */
    method public Task(BBjString title!)
        #this!(title!, "", 0, null())
    methodend

    rem /**
    rem  * A Task item's full constructor that specifies all possible parameters.
    rem  *
    rem  * @param title!            The task's title string
    rem  * @param description!      The task's description
    rem  * @param priority!          The task's priority level (1 -5)
    rem  * @param dueDate!          The task's due date
    rem  */
    method public Task(BBjString title!, BBjString description!, BBjNumber priority!, java.util.Date dueDate!)
        #init(title!, description!, priority!, dueDate!)
    methodend

    rem /**
    rem  * Initializes a Task item and assigns defaults to its properties if they weren't specified on the constructor.
    rem  */
    method protected void init(BBjString title!, BBjString description!, BBjNumber priority!, java.util.Date dueDate!)
        #title! = title!
        #description! = description!
        #uuid! = java.util.UUID.randomUUID().toString()
        #priority! = priority!
        #status! = Task.STATUS_INCOMPLETE()
        #created! = Instant.now()
        #createdTimestamp! = Timestamp.from(#created!)
    methodend


    rem Setters
    rem ========================================
    rem /**
    rem  * Sets the title of the Task to the provided string
    rem  * @param BBjString title!  The task's title
    rem  */
    method public void setTitle(BBjString title!)
        #title! = title!
    methodend

    rem /**
    rem  * Sets the description of the Task to the provided string
    rem  * @param BBjString description!  The task's description
    rem  */
    method public void setDescription(BBjString description!)
        #description! = description!
    methodend

    rem /**
    rem  * Sets the priority of the Task to the provided value
    rem  * @param BBjNumber priority!  The task's priority
    rem  */
    method public void setPriority(BBjNumber priority!)
        if priority! > #PRIORITY_MAX() then
            priority! = #PRIORITY_MAX()
        endif
        if priority! < #PRIORITY_MIN() then
            priority! = #PRIORITY_MIN()
        endif
        #priority! = priority!
    methodend

    rem /**
    rem  * Sets the due date of the Task to the provided value
    rem  * @param java.util.Date dueDate!  The task's due date
    rem  */
    method public void setDueDate(java.util.Date dueDate!)
        #dueDate! = dueDate!
    methodend

    rem /**
    rem  * Sets the due date of the Task to the provided value
    rem  * @param BBjNumber status!  The status code
    rem  */
    method public void setStatus(BBjNumber status!)
        #status! = status!
    methodend

    rem Getters
    rem ========================================
    rem /**
    rem  * Gets the description of the Task as a BBjString
    rem  * @return The Task's description
    rem  */
    method public BBjString getDescription()
        methodret #description!
    methodend

    rem /**
    rem  * Gets the priority of the Task as a BBjNumber
    rem  * @return The Task's priority
    rem  */
    method public BBjNumber getPriority()
        methodret #priority!
    methodend

    rem /**
    rem  * Gets the status of the Task as a BBjNumber
    rem  * @return the Task's status
    rem  */
    method public BBjNumber getStatus()
        methodret #status!
    methodend

    rem /**
    rem  * Gets the due date of the Task as a Java Date
    rem  * @return The Task's due date
    rem  */
    method public java.util.Date getDueDate()
        methodret #dueDate!
    methodend

    rem /**
    rem  * Gets the title of the Task as a BBjString
    rem  * @return      The tasks's title
    rem  */
    method public BBjString getTitle()
        methodret #title!
    methodend

    rem /**
    rem  * Gets the uuid of the Task as a BBjString
    rem  * @return The Task's uuid
    rem  */
    method public BBjString getUuid()
        methodret #uuid!
    methodend

    rem /**
    rem  * Gets a string representation of the status
    rem  * @return A string description of the status value
    rem  */
    method public BBjString getStatusString()
        s! = ""
        switch #status!
            case #STATUS_INCOMPLETE()
            s! = "incomplete"
            break
            case #STATUS_COMPLETE()
            s! = "complete"
            break
            case #STATUS_DEFFERRED()
            s! = "deferred"
            break
            case #STATUS_BLOCKED()
            s! = "blocked"
            break
            case default
            s! = "null"
        swend
        methodret s!
    methodend

    rem Misc utility methods
    rem ========================================
    rem /**
    rem  * Gets the uuid of the Task as a BBjString
    rem  * @return The Task's uuid
    rem  */
    method public void printDetails()
        ? "Title: ", #title!
        ? "Description: ", #description!
        ? "Status: ", #status!
        ? "Priority: ", #priority!
        ? "Due Date: ", #dueDate!
        ? "UUID: ", #uuid!
        ? "Creation Timestamp: ", #created!.toString()
        ? "Creation SQL Timestamp: ", #createdTimestamp!
    methodend

classend


rem BBj USE Statements
use ::TaskApp.bbj::TaskApp

rem Java USE Statements
use java.util.Date;     rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Date.html
use java.time.Instant;  rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Instant.html
use java.util.UUID;     rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/UUID.html
use java.sql.Timestamp; rem https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Timestamp.html