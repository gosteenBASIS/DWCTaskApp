rem /**
rem  * Task.bbj
rem  * @author gosteen, ndecker
rem  *
rem  */
rem package TaskApp

REM test push


rem Test program that creates a task and prints out its details
declare auto Task t!
t! = new Task("My First Task")
t!.printDetails()
end


rem /**
rem  * Defines the data structure for a task in the TaskApp
rem  */
class public Task

    rem Public Fields
    rem ========================================
    rem /** The title of the task. */
    field public BBjString Title!

    rem /** The description of the task. */
    field public BBjString Description!

    field public BBjVector Tags!

    rem /** Boolean indicating whether the task is complete. */
    field public BBjNumber Complete! = 0

    rem /** Boolean indicating whether the task is deleted. */
    field public BBjNumber Deleted! = 0

    rem /** The priority of the task is a numeric that goes from 1 to 6, where 1 = highest priority and 6 = no priority. */
    field public BBjNumber Priority!

    rem /** The due date for the task as a Julian number.
    rem   * A value of -1 indicates an undefined due date.
    rem   */
    field public BBjNumber DueDate!

    rem Protected Fields
    rem ========================================
    rem /** The unique auto-generated ID for the task that may be used to distinguish between instances of the class. */
    field protected BBjString Uuid!

    rem /** The instant in time that the user created the task, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS) */
    field protected BBjString Created!


    rem Constants
    rem ========================================

    method public static BBjString FLAG_BLOCKED()
        methodret "blocked"
    methodend

    method public static BBjString FLAG_DEFERRED()
        methodret "deferred"
    methodend

    rem /** A constant value that represents the minimum allowed priority value */
    method public static BBjNumber PRIORITY_MIN()
        methodret 6
    methodend

    rem /** A constant value that represents the maximum allowed priority value */
    method public static BBjNumber PRIORITY_MAX()
        methodret 1
    methodend

    rem Constructors
    rem ========================================
    rem /**
    rem  * A Task item's constructor that only takes a title parameter. All other parameters will be set to their default values.
    rem  *
    rem  * @param title!            The task's title string
    rem  */
    method public Task(BBjString title!)
        #init()
        #Title! = title!
    methodend

    rem /**
    rem  * A Task item's constructor that sets all parameters to their default values.
    rem  */
    method public Task()
        #init()
    methodend

    rem /**
    rem  * A Task item's constructor that takes a JsonObject instead of individual parameters
    rem  *
    rem  * @param json!            The JSON representation of the Task object
    rem  */
    method public Task(JsonObject json!)
        #init()
        rem This error checking doesn't seem to work -- better to use .has() to check if the thing exists?
        rem get(member) returns Null if it doesn't exist
        #Title! = json!.get("title",err=*NEXT).getAsString()
        #Description! = json!.get("description",err=*NEXT).getAsString()
        #Uuid! = json!.get("uuid").getAsString()
        #Priority! = json!.get("priority",err=*NEXT).getAsInt()
        #DueDate! = json!.get("duedate",err=*NEXT).getAsInt()
        #Created! = json!.get("created",err=*NEXT).getAsString()
        if (json!.has("complete")) then #Complete! = json!.get("complete",err=*NEXT).getAsInt()
    methodend

    rem /**
    rem  * Create a clone of a task
    rem  *
    rem  * @param task!        The task to clone.
    rem  */
    method public Task(Task task!)
        #init()
        #Title! = task!.getTitle()
        #Description! = task!.getDescription()
        #Priority! = task!.getPriority()
        #DueDate! = task!.getDueDate()
        #Complete! = task!.getComplete()
        #Uuid! = task!.getUuid()
        #Created! = task!.getCreated()
    methodend

    rem /**
    rem  * Initializes a Task item and assigns defaults to its properties.
    rem  * This method is called by the other constructors to initialize all the properties.
    rem  */
    method protected void init()
        #Title! = ""
        #Description! = ""
        #Uuid! = java.util.UUID.randomUUID().toString()
        #Priority! = 6
        #Tags! = BBjAPI().makeVector()
REM         #Flags!.addItem(#FLAG_INCOMPLETE())
        #Complete! = 0
        #DueDate! = -1
        #Created! = date(jul(date(0)), tim, "%Yz-%Mz-%DzT%hz:%mz")
    methodend

    rem /**
    rem  * Copy all editable info into this task from source; excluding Uuid and Created timestamp
    rem  */
    method public void copyInfo(Task source!)
        #Title! = source!.getTitle()
        #Description! = source!.getDescription()
        #Priority! = source!.getPriority()
        #DueDate! = source!.getDueDate()
        #Complete! = source!.getComplete()
    methodend

    rem Setters
    rem ========================================

    rem /**
    rem  * Sets the priority of the Task to the provided value
    rem  * @param BBjNumber priority!  The task's priority
    rem  */
    method public void setPriority(BBjNumber priority!)
        if priority! < #PRIORITY_MAX() then
            priority! = #PRIORITY_MAX()
        endif
        if priority! > #PRIORITY_MIN() then
            priority! = #PRIORITY_MIN()
        endif
        #Priority! = priority!
    methodend

    rem Getters
    rem ========================================

    rem /**
    rem  * Gets the uuid of the Task as a BBjString
    rem  * @return The Task's uuid
    rem  */
    method public BBjString getUuid()
        methodret #Uuid!
    methodend

    rem Misc utility methods
    rem ========================================
    rem /**
    rem  * Gets the uuid of the Task as a BBjString
    rem  * @return The Task's uuid
    rem  */
    method public void printDetails()
        ? "Title: ", #Title!
        ? "Description: ", #Description!
        ? "Complete: ", #Complete!
        ? "Priority: ", #Priority!
        ? "Due Date: ", #DueDate!
        ? "UUID: ", #Uuid!
        ? "Creation Timestamp: ", #Created!

        ?
        ? "getAsJsonObject(): "
        ? #getAsJsonObject()

        ?
        ? "getAsFormattedString(): "
        ? #getAsFormattedString()
    methodend

    rem /**
    rem  * Returns the Task object as a JSON object that may be serialized
    REM  * @return      A JsonObject version of the Task
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject json!

        json! = new JsonObject()
        json!.addProperty("uuid", #getUuid())
        json!.addProperty("title", iff(#getTitle() <> null(), #getTitle(), ""))
        json!.addProperty("description", iff(#getDescription() <> null(), #getDescription(), ""))
        json!.addProperty("complete", iff(#getComplete() <> null(), str(#getComplete()), ""))
        json!.addProperty("priority", iff(#getPriority() <> null(), str(#getPriority()), ""))
        json!.addProperty("duedate", iff(#getDueDate() <> null(), str(#getDueDate()), ""))
        json!.addProperty("created", #getCreated().toString())

        methodret json!
    methodend

    rem /**
    rem  * Returns the Task object as a stringified JSON object that may be serialized
    REM  * @return      A stringified JsonObject version of the Task
    rem  */
    method public BBjString getAsString()
        methodret #getAsJsonObject().toString()
    methodend

    rem /**
    rem  * Returns the Task object as a nicely-formatted stringified JSON object that may be serialized
    REM  * @return      A stringified JsonObject version of the Task
    rem  */
    method public BBjString getAsFormattedString()
        declare auto TreeMap map!

        json! = #getAsJsonObject()
        if (json! = null()) then methodret ""
        gson! = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create()
        map! = gson!.fromJson(json!, TreeMap.class)
        methodret gson!.toJson(map!)

    methodend
classend


rem BBj USE Statements
use ::TaskListView.bbj::TaskListView
use ::Utils.bbj::Utils

rem Java USE Statements
use java.time.LocalDate; rem https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html
use java.util.UUID;      rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/UUID.html
use java.util.TreeMap;   rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/TreeMap.html
use java.sql.Timestamp;  rem https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Timestamp.html

rem Google's Gson for JSON, which is included with BBj
use com.google.gson.Gson;           rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/Gson.html
use com.google.gson.GsonBuilder;    rem https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html
use com.google.gson.JsonObject;     rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/JsonObject.html
use com.google.gson.JsonArray;      rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/JsonArray.html