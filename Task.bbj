rem /**
rem  * Task.bbj
rem  * @author gosteen, ndecker
rem  *
rem  */
rem package TaskApp


rem Test program that creates a task and prints out its details
declare auto Task t!
t! = new Task("My First Task")
t!.printDetails()
end


rem /**
rem  * Defines the data structure for a task in the TaskApp
rem  */
class public Task

    rem Public Fields
    rem ========================================


    rem Protected Fields
    rem ========================================
    rem /** The title of the task. */
    field public BBjString Title!

    rem /** The description of the task. */
    field public BBjString Description!

    rem /** The unique auto-generated ID for the task that may be used to distinguish between instances of the class. */
    field protected BBjString Uuid!

    rem Can we do enums in BBj? Should status just be a boolean isComplete to start with?
    rem /** The status of the task that denotes whether the task is complete or not. */
    field public BBjNumber Status!

    rem Is a "number" the best way to do priority? It should be restricted to certain values.
    rem /** The priority of the task as a numeric that goes from 1 to 5, where 1 = lowest priority and 5 = highest priority. */
    field public BBjNumber Priority!

    rem /** The due date for the task as a Julian number.
    rem   * A value of -1 indicates an undefined due date.
    rem   */
    field public BBjNumber DueDate!

    rem /** The instant in time that the user created the task */
    field protected Instant Created!

    rem Constants
    rem ========================================
    rem /** A constant value that's used to set the Task's status to incomplete (to do) */
    method public static BBjNumber STATUS_INCOMPLETE()
        methodret 0
    methodend
    rem /** A constant value that's used to set the Task's status to complete (finished or done) */
    method public static BBjNumber STATUS_COMPLETE()
        methodret 1
    methodend
    rem /** A constant value that's used to set the Task's status to deffered (on hold) */
    method public static BBjNumber STATUS_DEFFERRED()
        methodret 2
    methodend
    rem /** A constant value that's used to set the Task's status to blocked (can not complete this task until a prerequisite has been completed) */
    method public static BBjNumber STATUS_BLOCKED()
        methodret 3
    methodend

    rem /** A constant value that represents the minimum allowed priority value */
    method public static BBjNumber PRIORITY_MIN()
        methodret 0
    methodend

    rem /** A constant value that represents the maximum allowed priority value */
    method public static BBjNumber PRIORITY_MAX()
        methodret 5
    methodend

    rem Constructors
    rem ========================================
    rem /**
    rem  * A Task item's constructor that only takes a title parameter. All other parameters will be set to their default values.
    rem  *
    rem  * @param title!            The task's title string
    rem  */
    method public Task(BBjString title!)
        #this!(title!, "", 0, -1)
    methodend

    rem /**
    rem  * A Task item's full constructor that specifies all possible parameters.
    rem  * TODO: Validation for constructor
    rem  * @param title!            The task's title string
    rem  * @param description!      The task's description
    rem  * @param priority!         The task's priority level (1 -5)
    rem  * @param dueDate!          The task's due date
    rem  */
    method public Task(BBjString title!, BBjString description!, BBjNumber priority!, BBjNumber dueDate!)
        #init(title!, description!, priority!, dueDate!)
    methodend

    rem /**
    rem  * Initializes a Task item and assigns defaults to its properties if they weren't specified on the constructor.
    rem  */
    method protected void init(BBjString title!, BBjString description!, BBjNumber priority!, BBjNumber dueDate!)
        #Title! = title!
        #Description! = description!
        #Uuid! = java.util.UUID.randomUUID().toString()
        #Priority! = priority!
        #Status! = Task.STATUS_INCOMPLETE()
        #DueDate! = dueDate!
        #Created! = Instant.now()
    methodend


    rem Setters
    rem ========================================

    rem /**
    rem  * Sets the priority of the Task to the provided value
    rem  * @param BBjNumber priority!  The task's priority
    rem  */
    method public void setPriority(BBjNumber priority!)
        if priority! > #PRIORITY_MAX() then
            priority! = #PRIORITY_MAX()
        endif
        if priority! < #PRIORITY_MIN() then
            priority! = #PRIORITY_MIN()
        endif
        #Priority! = priority!
    methodend

    rem Getters
    rem ========================================

    rem /**
    rem  * Gets the uuid of the Task as a BBjString
    rem  * @return The Task's uuid
    rem  */
    method public BBjString getUuid()
        methodret #Uuid!
    methodend

    rem /**
    rem  * Gets a string representation of the status
    rem  * @return A string description of the status value
    rem  */
    method public static BBjString getStatusString(BBjNumber status!)
        switch status!
            case #STATUS_INCOMPLETE()
                s! = "incomplete"
                break
            case #STATUS_COMPLETE()
                s! = "complete"
                break
            case #STATUS_DEFFERRED()
                s! = "deferred"
                break
            case #STATUS_BLOCKED()
                s! = "blocked"
                break
            case default
                throw "Invalid status provided to Task.getStatusString()",17
                break
        swend
        methodret s!
    methodend

    rem Misc utility methods
    rem ========================================
    rem /**
    rem  * Gets the uuid of the Task as a BBjString
    rem  * @return The Task's uuid
    rem  */
    method public void printDetails()
        ? "Title: ", #Title!
        ? "Description: ", #Description!
        ? "Status: ", #Status!
        ? "Priority: ", #Priority!
        ? "Due Date: ", #DueDate!
        ? "UUID: ", #Uuid!
        ? "Creation Timestamp: ", #Created!.toString()
    methodend

    rem /**
    rem  * TODO: make docs for these
    rem  */
    method public static LocalDate getLocalDate(BBjNumber jul!)
        rem Julian date of 1/1/1970 is 2440588
        methodret LocalDate.ofEpochDay(jul!-2440588)
    methodend

    method public static BBjNumber getJulian(LocalDate ld!)
        methodret ld!.toEpochDay()+2440588
    methodend
classend


rem BBj USE Statements
use ::TaskApp.bbj::TaskApp

rem Java USE Statements
use java.time.LocalDate; rem https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html
use java.time.Instant;   rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/Instant.html
use java.util.UUID;      rem https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/UUID.html
use java.sql.Timestamp;  rem https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Timestamp.html