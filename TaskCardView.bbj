REM /**
REM  * TaskCardView.bbj
REM  * @author gosteen, ndecker, bhighhill
REM  *
REM  * TaskCardView represents the childwindow of a task view
REM  */
REM package TaskApp

class public TaskCardView extends TaskView
    field protected BBjButton       btnDeleteTask!
    field protected BBjButton       btnSetComplete!

    REM /**
    REM  * Constructor for the TaskCardView
    REM  *
    REM  * @param BBjWindow parent! The parent window which contains all task child windows of a given view
    REM  * @param Task t!           The Task that is to be added to a given view
    REM  */
    method public TaskCardView(BBjWindow parent!, Task t!)
        #super!(parent!,t!)
        #win!.addClass("winCardView")
        #title!.addClass("textTitle")

        #btnSetComplete! = #win!.addButton("")

        #btnSetComplete!.addClass("btnSetComplete")
        #btnSetComplete!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "setComplete")

        trashIcon! = "<html><dwc-icon pool='tabler' name='trash' style='width: 25px; height: 25px'></dwc-icon>"
        #btnDeleteTask! = #win!.addButton(trashIcon!)
        #btnDeleteTask!.addClass("btnDelete")
        #btnDeleteTask!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "onDelete")

        #refresh()
    methodend

    REM /**
    REM  * Updates task data on refresh
    REM  */
    method public void refresh()
        #super!.refresh()

        if (#task!.getComplete()) then
            #win!.addClass("complete")
            #btnSetComplete!.setText("Mark as Incomplete")
            if (#priorityFlag! <> null()) then #priorityFlag!.addClass("priority-transparent")
        else
            #win!.removeClass("complete")
            #win!.setToolTipText("Click to edit task")
            #btnSetComplete!.setText("Mark as Complete")
            if (#priorityFlag! <> null()) then #priorityFlag!.removeClass("priority-transparent")
        endif

        #description!.setToolTipText(#task!.getDescription())
        #title!.setToolTipText(#task!.getTitle())

    methodend

    REM /**
    REM  * Callback event for the task completion check box.  Sets the associated task to complete.
    REM  *
    REM  * @param BBjButtonPushEvent e!     The BBjButtonPushEvent that causes this method to be executed
    REM  */
    method public void setComplete(BBjButtonPushEvent e!)
         if (#task!.getComplete()) then
            #task!.setComplete(0)
        else
            #task!.setComplete(1)
        endif

        BBjAPI().postCustomEvent("TASK_UPDATE",#task!)
    methodend

    REM /**
    REM  * Triggers message box which prompts user for confirmation before deleting a task
    REM  *
    REM  * @param BBjButtonPushEvent e!     The BBjButtonPushEvent that causes this method to be executed
    REM  */
    method public void onDelete(BBjButtonPushEvent e!)
        confirmDeleteTask! = msgbox("Are you sure you want to delete this task?", BBjSysGui.MSGBOX_BUTTONS_YES_NO + BBjSysGui.MSGBOX_ICON_EXCLAMATION, "Delete Task")
    
        if (confirmDeleteTask! = 6) then
            #task!.setDeleted(1)
            BBjAPI().postCustomEvent("TASK_UPDATE",#task!)
        endif
    methodend
classend

REM BBj USE Statements
use ::Task.bbj::Task
use ::Utils.bbj::Utils
use ::TaskView.bbj::TaskView
use ::TaskApp.bbj::TaskApp
