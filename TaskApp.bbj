rem /**
rem  * TaskApp.bbj
rem  * @author gosteen, ndecker
rem  *
rem  */
rem package TaskApp


declare auto TaskApp app!
app! = new TaskApp()
app!.run()
end


rem /**
rem  * A DWC-specific task manager BBj program.
rem  *
rem  * The TaskApp program was designed to a be part of a tutorial series that covers
rem  * how to write a graphical web-based application in BBj. It's designed to run
rem  * in the BASIS Dynamic Web Client (DWC), and takes advantage of several DWC
rem  * features including light/dark theme support, responsive design, and making
rem  * use of 3rd-party web components.
rem  */
class public TaskApp

    rem Protected Fields
    rem ========================================
    field protected BBjSysGui           sysgui!
    field protected BBjWebManager       webManager!
    field protected BBjTopLevelWindow   win!
    field protected BBjTopLevelWindow   winSettings!


    rem Some sort of list of tasks.
    rem ========================================
    rem It could be a BBjVector or BBjArray of tasks.
    rem It could also be a Java Collection class like:
    rem     Set     https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Set.html
    rem     List    https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html
    rem     Map     https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Map.html
    rem /**
    rem  * A collection of Task objects in a Java TreeMap
    rem  *
    rem  * @see <a href='https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/TreeMap.html' target='_blank'>TreeMap</a> documentation
    rem  */
    field protected TreeMap tasks!


    rem Constants
    rem ========================================
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's light theme */
    method public static BBjString THEME_LIGHT()
        methodret "light"
    methodend
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's dark theme */
    method public static BBjString THEME_DARK()
        methodret "dark"
    methodend
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's system theme,
    rem  * meaning that it follows the operating system's configuration.  For example, when the
    rem  * user's device switches to its dark theme, then the app will also switch its theme
    rem  * to the DWC's dark theme. */
    method public static BBjString THEME_SYSTEM()
        methodret "system"
    methodend


    rem User Preferences
    rem ========================================
    rem /** The user's preferred DWC theme to use for the UI */
    field protected BBjString prefsTheme! = #THEME_SYSTEM()
    rem /** The user's preferred priority level for new Tasks that have not been assigned a priority */
    field protected BBjNumber prefsDefaultTaskPriority!


    rem Constructors
    rem ========================================
    method public TaskApp()

        rem Instatiate the WebManager and use it to inject the app's CSS
        #webManager! = BBjAPI().getWebManager()
        css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(dsk("")+dir("")+"TaskApp.css"))
        BBjAPI().getWebManager().injectStyle(css!, 0, "name=taskapp_css")

        rem Create the collection for the tasks
        #tasks! = new TreeMap()

    methodend


    rem Methods
    rem ========================================
    rem /**
    rem  * Runs the TaskApp application
    rem  */
    method public void run()
        rem Set defaults and apply user preferences
        BBjAPI().getWebManager(err=*NEXT).setTheme(prefsTheme!,err=*NEXT)

        #createSampleTasks(10)

        rem Create the UI and display the tasks
        #sysgui! = BBjAPI().openSysGui("X0")
        #OnShowSettings(null())

        process_events
    methodend

    rem /**
    rem  * Creates sample tasks to use for a demo
    rem  *
    rem  * @param numTasks! The number of sample tasks to create
    rem  */
    method public void createSampleTasks(BBjNumber numTasks!)
        declare auto BBjString  taskName!
        declare auto Task       task!

        for i = 0 to numTasks! - 1
            taskName! = "Task " + str(i)
            task! = new Task(taskName!)

            rem Do some random configuration of the tasks

            rem Add the task to the collection of Tasks
            #addTask(task!)
        next i
    methodend

    rem /**
    rem  * Adds a Task to the tasklist
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void addTask(Task task!)
        #tasks!.put(task!.getUuid(), task!)
    methodend

    rem /**
    rem  * Removes a Task from the tasklist by specifying the tasks's ID
    rem  *
    rem  * @param id        The task's unique ID
    rem  */
    method public void removeTask(BBjString id!)
    methodend

    rem /**
    rem  * Removes a Task from the tasklist by specifying the tasks object
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void removeTask(Task task!)
    methodend

    rem /**
    rem  * Shows the app's configuration window
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void OnShowSettings(BBjButtonPushEvent event!)
        rem To Do
        rem 1) Define the theme color
        themeColor! = "Tangerine"


        rem Create the window and controls if it doesn't yet exist.  Otherwise, we'll simply display the existing one that we created and previously hid.
        if (#winSettings! = null()) then
            #winSettings! = #sysgui!.addWindow("Settings", $011B0010$)
            #winSettings!.addStyle("winSettings")

            rem Create the [Done] button that closes the settings window
            title! = #winSettings!.addStaticText("Settings", $4000$)
            title!.addStyle("settingsTitle")
            settingsDone! = #winSettings!.addButton("Done")
            settingsDone!.addStyle("settingsDone")

            rem Personalization
            text! = #winSettings!.addStaticText("Personalization")
            text!.addStyle("settingsCategoryTitle")
            win! = #winSettings!.addChildWindow("",$00108800$,#sysgui!.getAvailableContext())
            win!.addStyle("settingsChildWindow")
            text! = win!.addStaticText("<html><bbj-icon pool='tabler' name='palette'></bbj-icon>&&nbsp; Theme")
            text! = win!.addStaticText(themeColor!)
            settingsThemeColor! = win!.addButton("<html><bbj-icon pool='tabler' name='chevron-right' class='chevron'></bbj-icon>")

            rem About
            text! = #winSettings!.addStaticText("About the App")
            text!.addStyle("settingsCategoryTitle")
            win! = #winSettings!.addChildWindow("",$00108800$,#sysgui!.getAvailableContext())
            win!.addStyle("settingsChildWindow")
            text! = win!.addStaticText("<html><bbj-icon pool='tabler' name='info-circle'></bbj-icon>&&nbsp; About")
            settingsAbout! = win!.addButton("<html><bbj-icon pool='tabler' name='chevron-right' class='chevron'></bbj-icon>")

            rem Set the control callbacks
            settingsDone!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsDone")
            settingsThemeColor!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsThemeColor")
            settingsAbout!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsAbout")
        endif

        rem Since we created the window from BBj as hidden, we have to show it.  
        rem The actual visibility will be a combination of BBj's setVisible() and CSS to animate the opacity.
        #winSettings!.setVisible(1)
    methodend

    method public void onSettingsDone(BBjButtonPushEvent event!)
        #winSettings!.setVisible(0)
    methodend
    method public void onSettingsThemeColor(BBjButtonPushEvent event!)
        temp = msgbox("Net Yet Implemented")
    methodend
    method public void onSettingsAbout(BBjButtonPushEvent event!)
        temp = msgbox("TaskApp is current at version 0.0!")
    methodend

classend


rem BBj USE Statements
use ::Task.bbj::Task

rem Java USE Statements
use java.util.Date
use java.util.TreeMap