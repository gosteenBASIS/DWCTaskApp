rem /**
rem  * TaskApp.bbj
rem  * @author gosteen, ndecker
rem  *
rem  */
rem package TaskApp


declare auto TaskApp app!
app! = new TaskApp()
app!.run()
end


rem /**
rem  * A DWC-specific task manager BBj program.
rem  *
rem  * The TaskApp program was designed to a be part of a tutorial series that covers
rem  * how to write a graphical web-based application in BBj. It's designed to run
rem  * in the BASIS Dynamic Web Client (DWC), and takes advantage of several DWC
rem  * features including light/dark theme support, responsive design, and making
rem  * use of 3rd-party web components.
rem  */
class public TaskApp

    rem Protected Fields
    rem ========================================
    field protected BBjSysGui           sysgui!
    field protected BBjWebManager       webManager!
    field protected BBjTopLevelWindow   winMain!
    field protected TaskProperties      taskProperties!
    field protected BBjChildWindow      winNavBar!
    field protected BBjChildWindow      winToolBar!
    field protected BBjChildWindow      winTitle!
    field protected BBjChildWindow      winTaskList!
    field protected BBjTopLevelWindow   winSettings!
    field protected BBjStaticText       labelDay!
    field protected BBjStaticText       labelDate!

    field protected BBjVector           vectTaskLists! = BBjAPI().makeVector()

    rem NavBar and ToolBar controls
    field protected BBjButton           btnAddTaskFAB!
    field protected BBjButton           btnAddTask!
    field protected BBjButton           btnSettings!
    field protected BBjButton           btnReload!
    field protected BBjButton           btnExport!
    field protected BBjButton           btnImport!
    field protected BBjListButton       lstFontFamily!

    rem Misc Data
    field protected BBjString           appName! = "TaskApp"
    field protected BBjString           version! = "0.02"
    field protected BBjString           appPath! = dsk("") + dir("")
    field protected BBjVector           vectFontFamilies! = BBjAPI().makeVector()

    rem Some sort of list of tasks.
    rem ========================================
    rem It could be a BBjVector or BBjArray of tasks.
    rem It could also be a Java Collection class like:
    rem     Set     https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Set.html
    rem     List    https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html
    rem     Map     https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Map.html
    rem /**
    rem  * A collection of Task objects in a Java TreeMap
    rem  * Key:   UUID of the Task
    rem  * Value: Task object
    rem  * @see <a href='https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/TreeMap.html' target='_blank'>TreeMap</a> documentation
    rem  */
    field protected TreeMap tasks!
    field protected TreeMap taskViews!

    rem Constants
    rem ========================================
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's light theme */
    method public static BBjString THEME_LIGHT()
        methodret "light"
    methodend
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's dark theme */
    method public static BBjString THEME_DARK()
        methodret "dark"
    methodend
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's system theme,
    rem  * meaning that it follows the operating system's configuration.  For example, when the
    rem  * user's device switches to its dark theme, then the app will also switch its theme
    rem  * to the DWC's dark theme. */
    method public static BBjString THEME_SYSTEM()
        methodret "system"
    methodend


    rem User Preferences
    rem ========================================
    rem /** The user's preferred DWC theme to use for the UI */
    field protected BBjString prefsTheme! = #THEME_SYSTEM()
    rem /** The user's preferred priority level for new Tasks that have not been assigned a priority */
    field protected BBjNumber prefsDefaultTaskPriority!


    rem Constructors
    rem ========================================
    method public TaskApp()

        rem Instatiate the WebManager and use it to inject the app's CSS
        #webManager! = BBjAPI().getWebManager()
        css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(dsk("")+dir("")+"TaskApp.css"))
        #webManager!.injectStyle(css!, 0, "name=taskapp_css")

        rem Set the app's icon in the browser's tab
        url! = "https://public.basis.cloud/images/DWCTaskApp.svg"
        attrib! = "rel=icon,type=image/svg,id=dwc_taskapp_icon"
        #webManager!.injectLinkUrl(url!, 1, attrib!, err=*NEXT)

        rem Inject links for a number of custom Google fonts
        fontFamily! = "?family=Asap&family=Bebas+Neue&family=Fira+Sans&family=Fredoka:wght@300..700&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Marcellus+SC&family=Marko+One&family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&family=Oswald:wght@200..700&family=Rambla:ital,wght@0,400;0,700;1,400;1,700&family=Signika:wght@300;400&family=Teko:wght@300..700&family=Ubuntu&family=Ubuntu+Mono:ital,wght@0,400;0,700;1,400;1,700&family=Work+Sans"
        fontFamily! = fontFamily! + "&family=K2D:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800"
        #webManager!.injectLinkUrl("https://fonts.googleapis.com", 1, "rel=preconnect")
        #webManager!.injectLinkUrl("https://fonts.gstatic.com", 1, "crossorigin")
        #webManager!.injectLinkUrl("https://fonts.googleapis.com/css2?" + fontFamily!, 1, "rel=stylesheet,display=swap")

        rem Create a list of font families filled with Google fonts that the user will be able to choose from to style the tasks
        DATA "Marcellus SC", "Marko One", "Merriweather", "Oswald", "Rambla", "Signika", "Teko", "Ubuntu", "Ubuntu Mono", "Work Sans", "Asap", "K2D", "Bebas Neue", "Fira Sans", "Fredoka",  "Lato"
        while 1
            DREAD family$,err=*BREAK
            #vectFontFamilies!.addItem(family$)
        wend
        rem Sort the vector of fonts alphabetically by name
        java.util.Collections.sort(#vectFontFamilies!)

        rem Create the collection for the tasks
        #tasks! = new TreeMap()
        #taskViews! = new TreeMap()

        BBjAPI().setCustomEventCallback("TASK_UPDATE",#this!,"onTaskUpdate")
    methodend


    rem Methods
    rem ========================================
    rem /**
    rem  * Runs the TaskApp application
    rem  */
    method public void run()
        rem Set defaults and apply user preferences
        #webManager!.setTheme(#prefsTheme!, err=*NEXT)

        if (new java.io.File(#appPath!+"tasks.json").exists()) then
            #onImport(null(), err=*next)
        else
            #createSampleTasks(50)
        endif

        if (#tasks!.size() = 0)
            #createSampleTasks(50)
        endif

        rem Create the UI and display the tasks
        #sysgui! = BBjAPI().openSysGui("X0")
        #createMainWindow()
        process_events
    methodend

    rem /**
    rem  * Create the main window for the application
    rem  */
    method public void createMainWindow()
        #winMain! = #sysgui!.addWindow("TaskApp", $011C1091$)
        #winMain!.addClass("winMain")
        #winMain!.setIcon(dsk("")+dir("")+"images/DWCTaskApp.png")

        rem Create the child windows
        #winNavBar! = #winMain!.addChildWindow("NavBar", $00108800$, #sysgui!.getAvailableContext())
        #winNavBar!.addClass("winNavBar")

        rem Determine the user's name and initials for the profile display in the NavBar
        userName! = System.getProperty("com.basis.jetty.company_name")
        if (userName! = null()) then userName! = "Guest User"
        userInitials! = userName!.toUpperCase().substring(0,2)
        lblUserName! = #winNavBar!.addStaticText(userName!)
        lblUserName!.addClass("nav_item nav_user_name")
        #webManager!.injectStyle(".nav_item.nav_user_name::before { content: '" + userInitials! + "';")

        rem Create a linefeed-delimited list of font families from the vectory to populate the BBjListButton
        fontFamiliesList! = java.lang.String.join($0a$, java.util.Arrays.asList(#vectFontFamilies!))
        rem Modfify each entry in the list so that use uses HTML markup to style the font name to that font family
        fontFamiliesList! = fontFamiliesList!.replaceAll("(?mi)^(.*)$", "<html><span style='font-family:$1'>$1</span>")

        rem Add the font family listbutton, add some custom classes, and set the callback
        #lstFontFamily! = #winNavBar!.addListButton(fontFamiliesList!)
        #lstFontFamily!.setAttribute("button-height", "2.25em")
        #lstFontFamily!.setAttribute("label", "Font Family")
        #lstFontFamily!.setAttribute("open-height", "100%")
        #lstFontFamily!.addClass("nav_item nav_fonts")
        #lstFontFamily!.setCallback(BBjControl.ON_LIST_CHANGE, #this!, "onListChangeFontFamilies")
        rem Initialize the listbutton by selecting the first item and then setting the font CSS custom property to make it take effect
        #lstFontFamily!.selectIndex(0)
        #setCssProperty("--app-font-task", str(#vectFontFamilies!.getItem(0)))

        #winToolBar! = #winMain!.addChildWindow("ToolBar", $00108800$, #sysgui!.getAvailableContext())
        #winToolBar!.addClass("winToolBar")

        #winTitle! = #winMain!.addChildWindow("Title", $00108800$, #sysgui!.getAvailableContext())
        #winTitle!.addClass("winTitle")

        #winTaskList! = #winMain!.addChildWindow("Tasks", $00108800$, #sysgui!.getAvailableContext())
        #winTaskList!.addClass("winTasks")

        #addTaskList("incomplete")
        #addTaskList("waiting")
        #addTaskList("deferred")
        #addTaskList("complete")

        #labelDay! = #winTitle!.addStaticText("Today", $4000$)
        #labelDay!.addClass("labelDay")
        #labelDate! = #winTitle!.addStaticText(date(0:"%Dl, %Ml %D"), $4000$)
        #labelDate!.addClass("labelDate")

        rem Create the FAB (floating action button) and the toolbar buttons
        #btnAddTaskFAB! = #winMain!.addButton("+")
        #btnAddTaskFAB!.addClass("btnAddTaskFAB")
        #btnAddTaskFAB!.setAttribute("theme", "primary")

        #btnAddTask! = #winToolBar!.addButton("<html><bbj-icon pool='tabler' name='plus'></bbj-icon>")
        #btnAddTask!.addClass("toolbar_icon")
        #btnAddTask!.setToolTipText("Add Task")
        #btnAddTask!.setAttribute("expanse", "xs")

        #btnSettings! = #winToolBar!.addButton("<html><bbj-icon pool='tabler' name='settings'></bbj-icon>")
        #btnSettings!.addClass("toolbar_icon")
        #btnSettings!.setToolTipText("Settings")
        #btnSettings!.setAttribute("expanse", "xs")

        #btnExport! = #winToolBar!.addButton("<html><bbj-icon pool='tabler' name='file-download'></bbj-icon>")
        #btnExport!.addClass("toolbar_icon")
        #btnExport!.setToolTipText("Export tasks")
        #btnExport!.setAttribute("expanse", "xs")

        #btnImport! = #winToolBar!.addButton("<html><bbj-icon pool='tabler' name='file-upload'></bbj-icon>")
        #btnImport!.addClass("toolbar_icon")
        #btnImport!.setToolTipText("Import tasks")
        #btnImport!.setAttribute("expanse", "xs")

        #btnReload! = #winToolBar!.addButton("<html><bbj-icon pool='tabler' name='reload'></bbj-icon>")
        #btnReload!.addClass("toolbar_icon icon_reload")
        #btnReload!.setToolTipText("Reload")
        #btnReload!.setAttribute("expanse", "xs")

        rem Set callbacks for the UI controls
        #btnAddTaskFAB!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "onAddTask")
        #btnAddTask!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "onAddTask")
        #btnSettings!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "onShowSettings")
        #btnReload!.setCallback(BBjControl.ON_BUTTON_PUSH, #this!, "onReload")

        #btnImport!.setCallback(BBjControl.ON_BUTTON_PUSH,#this!,"onImport")
        #btnExport!.setCallback(BBjControl.ON_BUTTON_PUSH,#this!,"onExport")

        #displayTasks()
        #winMain!.setVisible(1)
    methodend

    rem /**
    rem  * Add a child window to the main window for each task
    rem  * This will eventually need to be a full-blown task manager, probably
    rem  */
    method public void displayTasks()
        declare auto Task task!

        rem Original code that uses the #tasks object which isn't sorted
        rem it! = #tasks!.values().iterator()

        orderedTasks! = #getSortedTasks(0)
        it! = orderedTasks!.values().iterator()

        while it!.hasNext()
            task! = it!.next()
            view! = #addTaskListView(task!)
            if (task!.isComplete()) then
REM                 view!.setVisible(0)
                view!.setVisible(1)
            endif
        wend
    methodend


    rem /**
    rem  * Returns a sorted TreeMap that's similar to the #tasks! TreeMap, except
    rem  * that its key is the priority+dueDate+Uuid (when sorted by priority),
    rem  * or dueDate+priority+Uuid (when sorted by date).  We're concatenating
    rem  * the three fields and letting the TreeMap object sort the tasks for us
    rem  * based on the constructed key.  This new TreeMap still contains the tasks
    rem  * in the value, and can be used to fill the task list view in a sorted manner.
    rem  */
    method public TreeMap getSortedTasks(BBjNumber byPriority)
        sortedTasks! = new TreeMap()

        it! = #tasks!.keySet().iterator()
        while it!.hasNext()
            uuid! = it!.next()
            task! = #tasks!.get(uuid!)
            priority! = task!.getPriority()
            dueDate! = task!.getDueDate()
            if (dueDate! > -1) then
                taskDate! = date(dueDate!:"%Yl-%Mz-%Dz")
            else
                rem If the due date isn't set, then we'll push it into the distant future for correct sorting
                taskDate! = "2100-01-01"
            endif

            rem This determines the sort order, which is based on the provide parameter
            if (byPriority) then
                key! = str(5-priority!) + taskDate! + uuid!
            else
                key! = taskDate! + str(5-priority!) + uuid!
            endif
            sortedTasks!.put(key!, task!)
        wend
        methodret sortedTasks!
    methodend



    rem /**
    rem  * Add a Task List Window
    rem  */
    method public BBjChildWindow addTaskList(BBjString name!)
        taskList! = #winTaskList!.addChildWindow(name!, $00108800$, #sysgui!.getAvailableContext())
        rem Probably remove winTasks, just use taskList
        taskList!.addClass("taskList fadeIn")
        #vectTaskLists!.addItem(taskList!)
        methodret taskList!
    methodend

    rem /**
    rem  * Adds a TaskListView for the given Task, and returns the TaskListView
    rem  */
    method public TaskListView addTaskListView(Task t!)
        taskList! = #vectTaskLists!.getItem(t!.getStatus())
        view! = new TaskListView(taskList!, t!)

        #taskViews!.put(t!.getUuid(), view!)
        view!.getwin().setCallback(BBjControl.ON_CLICK, #this!, "onTaskClick")
        methodret view!
    methodend

    rem /**
    rem  * Open an edit window to edit or create a new task
    rem  *
    rem  * @param e!    A BBjClickEvent
    rem  */
    method public void onTaskClick(BBjClickEvent e!)
        rem Only open window if it doesn't exist, this should be a field variable
        rem We're not using the click event as a click; it could be more efficient to pass a more useful object
        declare auto Task t!
        if (#taskProperties! = null()) then
            #taskProperties! = new TaskProperties()
        endif
        t! = #tasks!.get(e!.getControl().getAttribute("id"))
        #taskProperties!.loadTask(t!)
    methodend

    rem /**
    rem  * Creates sample tasks to use for a demo
    rem  *
    rem  * @param numTasks! The number of sample tasks to create
    rem  */
    method public void createSampleTasks(BBjNumber numTasks!)
        declare auto BBjString  taskName!
        declare auto Task       task!

        for i = 0 to numTasks! - 1
            taskName! = "Task " + str(i)
            task! = new Task()
            task!.setTitle(taskName!)
            task!.setStatus(rnd(4))
            if (mod(i,2) = 0) then
                rem Set due date for even-numbered tasks
                task!.setDueDate(jul(date(0)))
            endif
            #addTask(task!)
        next i
    methodend

    rem /**
    rem  * Adds a Task to the tasklist (the app's collection of Task objects)
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void addTask(Task task!)
        uuid! = task!.getUuid()
        #tasks!.put(uuid!, task!)
    methodend

    rem /**
    rem  * Returns the Task with the given UUID from the TreeMap of tasks.
    rem  */
    method public Task getTask(BBjString uuid!)
        methodret cast(Task, #tasks!.get(uuid!))
    methodend

    rem /**
    rem  * Activated by custom event TASK_UPDATE
    rem  * This method handles any UI or data updates that may be necessary when a Task is modified.
    rem  *
    rem  * @param event!    A BBjCustomEvent that has a Task Object as a payload.
    rem  */
    method public void onTaskUpdate(BBjCustomEvent event!)
        declare auto TaskListView view!
        declare auto Task t!
        task! = event!.getObject()
        uuid! = task!.getUuid()

        rem If the UUID is not present in #tasks!, this is a new Task to be added.
        if (#tasks!.containsKey(uuid!) = 0) then
            #addTask(task!)
            #addTaskListView(task!)
        endif

        view! = #taskViews!.get(uuid!)
        if (view! <> null()) then
            view!.refresh()
        endif

        if (task!.getDeleted()) then
            #removeTask(task!)
        endif

        rem Automatically export every time a task is updated
        #onExport(null())
    methodend

    rem /**
    rem  * Removes a Task from the tasklist by specifying the tasks's ID
    rem  *
    rem  * @param id        The task's unique ID
    rem  */
    method public void removeTask(BBjString uuid!)
        #tasks!.remove(uuid!)
        #taskViews!.remove(uuid!)
    methodend

    rem /**
    rem  * Removes a Task from the tasklist by specifying the tasks object
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void removeTask(Task task!)
        #tasks!.remove(task!.getUuid())
        #taskViews!.remove(task!.getUuid())
    methodend

    rem /**
    rem  * Reloads the application at the push of a button, which is typically only useful in development mode
    rem  * <p>
    rem  * The code creates a BBjBuiUrlCloseAction object to load the app's URL.  That way, the app can
    rem  * do a RELEASE which causes the same app to be loaded and executed again.
    rem  *
    rem  * @param e!        The BBjButtonPushEvent that causes this method to be executed
    rem  */
    method public void onReload(BBjButtonPushEvent e!)
        action! = #webManager!.urlAction(#webManager!.getUrl())
        #webManager!.setEndAction(action!)
        release
    methodend

    rem /**
    rem  * Adds a new Task object by
    REM  *  - creating a new Task object
    REM  *  - displaying the Task's property sheet to the user for customization
    rem  *
    rem  * @param e!        The BBjButtonPushEvent that causes this method to be executed
    rem  */
    method public void onAddTask(BBjButtonPushEvent e!)
        rem create a new task
        task! = new Task()
        rem open the edit window on that task
        if (#taskProperties! = null()) then
            #taskProperties! = new TaskProperties()
        endif
        #taskProperties!.loadTask(task!)
    methodend


    rem ====================  START of Settings ====================
    rem /**
    rem  * Shows the app's configuration window
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void onShowSettings(BBjButtonPushEvent e!)
        rem To Do
        rem 1) Define the theme color
        themeColor! = "Tangerine"

        rem Create the window and controls if it doesn't yet exist.  Otherwise, we'll simply display the existing one that we created and previously hid.
        if (#winSettings! = null()) then
            #winSettings! = #sysgui!.addWindow(#sysgui!.getAvailableContext(), "TaskApp Settings", $011B0010$)
            #winSettings!.addClass("winSettings")
            #winSettings!.setIcon(dsk("")+dir("")+"images/DWCTaskApp.png")

            rem Create the [Done] button that closes the settings window
            title! = #winSettings!.addStaticText("Settings", $4000$)
            title!.addClass("settingsTitle")
            settingsDone! = #winSettings!.addButton("Done")
            settingsDone!.addClass("settingsDone")

            rem Personalization
            text! = #winSettings!.addStaticText("Personalization")
            text!.addClass("settingsCategoryTitle")
            win! = #winSettings!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
            win!.addClass("settingsChildWindow")
            text! = win!.addStaticText("<html><bbj-icon pool='tabler' name='palette' class='icon'></bbj-icon>&&nbsp; Theme")
            text! = win!.addStaticText(themeColor!)
            settingsThemeColor! = win!.addButton("<html><bbj-icon pool='tabler' name='chevron-right' class='chevron'></bbj-icon>")

            rem About
            text! = #winSettings!.addStaticText("About the App")
            text!.addClass("settingsCategoryTitle")
            win! = #winSettings!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
            win!.addClass("settingsChildWindow")
            text! = win!.addStaticText("<html><bbj-icon pool='tabler' name='info-circle' class='icon'></bbj-icon>&&nbsp; About")
            settingsAbout! = win!.addButton("<html><bbj-icon pool='tabler' name='chevron-right' class='chevron'></bbj-icon>")

            rem Set the control callbacks
            settingsDone!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsDone")
            settingsThemeColor!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsThemeColor")
            settingsAbout!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsAbout")
        endif

        rem Since we created the window from BBj as hidden, we have to show it.
        rem The actual visibility will be a combination of BBj's setVisible() and CSS to animate the opacity.
        #winSettings!.setVisible(1)
    methodend

    method public void onSettingsDone(BBjButtonPushEvent e!)
        #winSettings!.setVisible(0)
    methodend
    method public void onSettingsThemeColor(BBjButtonPushEvent e!)
        temp = msgbox("Net Yet Implemented")
    methodend
    method public void onSettingsAbout(BBjButtonPushEvent e!)
        temp = msgbox("TaskApp is current at version 0.0!")
    methodend
    rem ====================  END of Settings ====================


    rem /**
    rem  * Callback that's executed when the user selects a custom font family.
    REM  * This gets the list button's selected index, then resolves that to
    REM  * a custom font family that's stored in the #vectFontFamilies!
    REM  * vector.  It then sets the CSS custom property for the DWC's
    REM  * sans-serif font family to the chosen font.
    rem  *
    rem  * BBjListChangeEvent e!    The BBjListButton's ON_LIST_CHANGE event
    rem  */
    method public void onListChangeFontFamilies(BBjListChangeEvent e!)
        rem Get the selected item from the list
        fontFamilyHtml! = e!.getSelectedItem()

        rem Since the item has HTML markup to style the family namne, remove all the HTML tags
        fontFamily! = fontFamilyHtml!.replaceAll("<[^>]*>", "")

        rem Alternatively, since the backing vector of font families is a global field, we could also
        rem get the selected font family by retrieving the item from the vector.  In this scenario,
        rem we can use the event's getSelectedIndex() method to specify the item's index in the vector.
        REM fontFamily! = str(#vectFontFamilies!.getItem(e!.getSelectedIndex()))

        rem Now set the font for the tasks by setting the CSS custom property that we defined for that purpose
        #setCssProperty("--app-font-task", fontFamily!)

        rem If the font is extremely compressed, then we'll add in some extra space between letters for improved legibilty
        fontFamily! = fontFamily!.toLowerCase()
        if (fontFamily!.contains("bebas")) OR (fontFamily!.contains("oswald"))  OR (fontFamily!.contains("teko")) then
            #setCssProperty("--app-font-task-spacing", "0.1ch")
        else
            rem Get the computed letter spacing style of the task title
            letterSpacing! = str(#webManager!.getComputedStyle("letter-spacing", ".title-display"))

            rem Only revert the letter spacing back to normal if it's not already set to 'normal'
            if (letterSpacing! <> "normal") then #setCssProperty("--app-font-task-spacing", "normal")
        endif
    methodend

    rem /**
    rem  * Utility method that sets a CSS custom property given the property and value.
    REM  * It ensures that the CSS property is properly formatted, then builds a CSS
    REM  * string from the iformation and adds it to the DOM, thus overriding any
    REM  * previous setting
    rem  *
    rem  * BBjListChangeEvent e!    The BBjListButton's ON_LIST_CHANGE event
    rem  */
    method public void setCssProperty(BBjString property!, BBjString value!)
        rem Sanitize the property by ensuring that it starts with '--' and changing all spaces to dashes
        if !(property!.startsWith("--")) then property! = "--" + property!
        property! = property!.replaceAll(" ", "-").trim()
        value! = value!.trim()
        if (value!.contains(" ")) then value! = "'" + value! + "'"

        rem Build the CSS string for the root element and append it to the DOM's <body> element
        css! = ":root { " + property! + ": " + value! + "; }"
        #webManager!.injectStyle(css!, 0, "app_custom_css_property")
    methodend

    rem /**
    rem  * Returns the collection of Task objects in a JsonArray.  This is used to
    rem  * serialize the tasks so that they can be exported, shared with another app,
    rem  * or saved to disk.
    rem  *
    rem  * @return JsonArray     The tasks collection as a JsonArray
    rem  */
    method protected JsonArray getTasksAsJsonArray()
        declare JsonArray array!
        declare auto BBjString uuid!
        declare auto Task task!

        array! = new JsonArray()
        it! = #tasks!.keySet().iterator()
        while it!.hasNext()
            uuid! = it!.next()
            task! = #tasks!.get(uuid!)
            array!.add(task!.getAsJsonObject())
        wend
        methodret array!
    methodend

    method public void onExport(BBjButtonPushEvent e!)
        rem todo: check if e! is null
        rem save to default location if null
        rem open save dialog if it's the export button

        rem todo: notify successful export
        json! = #getTasksAsJsonArray()
        gson! = new GsonBuilder().setPrettyPrinting().create()
        chan = unt
        f$ = #appPath! + "tasks.json"
        open(chan, isz=-1, mode="O_TRUNC,O_CREATE") f$
            write record(chan) gson!.toJson(json!).toString()
        close(chan)
        #consoleLog("Exported " + str(json!.size()) +  " tasks.")
    methodend

    method public void onImport(BBjButtonPushEvent e!)
        chan = unt
        f$ = #appPath! + "tasks.json"
        open(chan, isz=-1) f$
            read record(chan, siz=-1000000) json$
        close(chan)
        parser! = new JsonParser()
REM         parser!.setLenient(BBjAPI().TRUE)
        json! = parser!.parseString(json$)

        gson! = new GsonBuilder().setPrettyPrinting().create()
        #consoleLog(json!.toString())
        array! = gson!.fromJson(json!, JsonArray.class)
        it! = array!.iterator()
        rem todo: clear treemap after checking if there are any tasks to import
        rem todo: Error handling: what if the file doesn't exist? What if tasks aren't valid?
        rem we could return something; number of imported tasks or something
        while(it!.hasNext())
            jsonTask! = it!.next()
            t! = new Task(jsonTask!)
            #addTask(t!)
        wend
    methodend

    rem /**
    rem  * Logs the provided string into the user's browser Developer Tools console.
    rem  *
    rem  * Note that this is a convenience method that calls the consoleLogValues() method
    rem  * with an empty string for the second parameter (the value).
    rem  *
    rem  * @param logEntry!     The information to display in the Developer Tools console
    rem  */
    method protected void consoleLog(BBjString logEntry!)
        #consoleLogValues(logEntry!, "")
    methodend

    rem /**
    rem  * Logs the provided strings, usually key/value pairs, into the user's browser Developer Tools console.
    rem  * <p>
    rem  * If you're developing with VS Code, you can use its debug capabilities so that the
    rem  * browser's Developer Tools console is available in VS Code's debug console.  This
    rem  * allows you to view the browser's console output and interact with the interpreter
    rem  * from within VS Code.
    rem  *
    rem  * @param key!          The first information to display in the Developer Tools console, typically the key in a key/value pair
    rem  * @param value!        The second information to display in the Developer Tools console, typically the value in a key/value pair
    rem  */
    method public static void consoleLogValues(BBjString key!, BBjString value!)
        rem Sanitize the log entries by escaping single quotes
        key! = key!.replaceAll("'", "\'")
        value! = value!.replaceAll("'", "\'")

        rem Define the CSS to format the console output
        space! = " "
        cssSpace! = "'background: white;'"
        cssDebugPrefix! = "'background: hsl(60, 100%, 65%); color: hsl(350, 100%, 25%); padding: 2px 4px; border-radius: 3px; border: 1px solid hsl(350, 100%, 25%); font-weight: 700;'"
        cssKey! = "'background: hsl(210, 90%, 94%); color: hsl(210, 35%, 35%); padding: 2px 4px; border-radius: 3px; border: 1px solid hsl(210, 35%, 35%);'"
        cssValue! = "'background: hsl(115, 90%, 94%); color: hsl(115, 35%, 35%); padding: 2px 4px; border-radius: 3px; border: 1px solid hsl(115, 35%, 35%);'"

        rem Define the JavaScript that logs the information
        js! = "console.log('%cDebug Log:%c%s%c%s%c%s%c%s', " + cssDebugPrefix! + ", " + cssSpace! + ", `" + space! + "`," + cssKey! + ", `" + key! + "`," + cssSpace! + ", `" + space! + "`," + cssValue! + ",`" + value! + "`);"

        rem Get the SysGui device and execute the JavaScript to log the information to the Developer Tools console
        sg! = BBjAPI().getSysGui(err=*NEXT)
        if (sg! = null()) then sg! = BBjAPI().openSysGui("X0"); sgChan! = sg!.getChannel()
        sg!.executeScript(js!)
        if (sgChan! <> null()) then close(sgChan!,err=*NEXT)
    methodend

classend


rem BBj USE Statements
use ::Task.bbj::Task
use ::TaskProperties.bbj::TaskProperties
use ::TaskListView.bbj::TaskListView

rem Java USE Statements
use java.time.LocalDate
use java.util.TreeMap

rem Google's Gson for JSON, which is included with BBj
use com.google.gson.Gson;           rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/Gson.html
use com.google.gson.GsonBuilder;    rem https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html
use com.google.gson.JsonObject;     rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/JsonObject.html
use com.google.gson.JsonArray;      rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/JsonArray.html
use com.google.gson.JsonParser;     rem https://javadoc.io/static/com.google.code.gson/gson/2.10.1/com.google.gson/com/google/gson/JsonParser.html