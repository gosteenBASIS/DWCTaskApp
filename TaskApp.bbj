rem /**
rem  * TaskApp.bbj
rem  * @author gosteen, ndecker
rem  *
rem  */
rem package TaskApp


declare auto TaskApp app!
app! = new TaskApp()
app!.run()
end


rem /**
rem  * A DWC-specific task manager BBj program.
rem  *
rem  * The TaskApp program was designed to a be part of a tutorial series that covers
rem  * how to write a graphical web-based application in BBj. It's designed to run
rem  * in the BASIS Dynamic Web Client (DWC), and takes advantage of several DWC
rem  * features including light/dark theme support, responsive design, and making
rem  * use of 3rd-party web components.
rem  */
class public TaskApp

    rem Protected Fields
    rem ========================================
    field protected BBjSysGui           sysgui!
    field protected BBjWebManager       webManager!
    field protected BBjTopLevelWindow   winMain!
    field protected TaskProperties      taskProperties!
    field protected BBjChildWindow      winNavBar!
    field protected BBjChildWindow      winToolBar!
    field protected BBjChildWindow      winTitle!
    field protected BBjChildWindow      winTaskList!
    field protected BBjTopLevelWindow   winSettings!
    field protected BBjStaticText       labelDate!
    field protected BBjString           appName! = "TaskApp"
    field protected BBjString           version! = "0.01"

    rem Some sort of list of tasks.
    rem ========================================
    rem It could be a BBjVector or BBjArray of tasks.
    rem It could also be a Java Collection class like:
    rem     Set     https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Set.html
    rem     List    https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html
    rem     Map     https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Map.html
    rem /**
    rem  * A collection of Task objects in a Java TreeMap
    rem  *
    rem  * @see <a href='https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/TreeMap.html' target='_blank'>TreeMap</a> documentation
    rem  */
    field protected TreeMap tasks!


    rem Constants
    rem ========================================
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's light theme */
    method public static BBjString THEME_LIGHT()
        methodret "light"
    methodend
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's dark theme */
    method public static BBjString THEME_DARK()
        methodret "dark"
    methodend
    rem /** A constant value that's used to set the TaskApp's theme to the DWC's system theme,
    rem  * meaning that it follows the operating system's configuration.  For example, when the
    rem  * user's device switches to its dark theme, then the app will also switch its theme
    rem  * to the DWC's dark theme. */
    method public static BBjString THEME_SYSTEM()
        methodret "system"
    methodend


    rem User Preferences
    rem ========================================
    rem /** The user's preferred DWC theme to use for the UI */
    field protected BBjString prefsTheme! = #THEME_SYSTEM()
    rem /** The user's preferred priority level for new Tasks that have not been assigned a priority */
    field protected BBjNumber prefsDefaultTaskPriority!


    rem Constructors
    rem ========================================
    method public TaskApp()

        rem Instatiate the WebManager and use it to inject the app's CSS
        #webManager! = BBjAPI().getWebManager()
        css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(dsk("")+dir("")+"TaskApp.css"))
        #webManager!.injectStyle(css!, 0, "name=taskapp_css")

        rem Set the app's icon in the browser's tab
        url! = "https://public.basis.cloud/images/DWCTaskApp.svg"
        attrib! = "rel=icon,type=image/svg,id=dwc_taskapp_icon"
        #webManager!.injectLinkUrl(url!, 1, attrib!, err=*NEXT)

        rem Create the collection for the tasks
        #tasks! = new TreeMap()

    methodend


    rem Methods
    rem ========================================
    rem /**
    rem  * Runs the TaskApp application
    rem  */
    method public void run()
        rem Set defaults and apply user preferences
        BBjAPI().getWebManager(err=*NEXT).setTheme(prefsTheme!, err=*NEXT)

        #createSampleTasks(50)

        rem Create the UI and display the tasks
        #sysgui! = BBjAPI().openSysGui("X0")
        rem #OnShowSettings(null())
        #createMainWindow()

        process_events
    methodend

    rem /**
    rem  * Create the main window for the application
    rem  */
    method public void createMainWindow()
        #winMain! = #sysgui!.addWindow("TaskApp", $011C1091$)
        #winMain!.addClass("winMain")
        #winMain!.setIcon(dsk("")+dir("")+"images/DWCTaskApp.png")

        rem Create the child windows
        #winNavBar! = #winMain!.addChildWindow("NavBar", $00108800$, #sysgui!.getAvailableContext())
        #winNavBar!.addClass("winNavBar")
        
        #winToolBar! = #winMain!.addChildWindow("ToolBar", $00108800$, #sysgui!.getAvailableContext())
        #winToolBar!.addClass("winToolBar")
        
        #winTitle! = #winMain!.addChildWindow("Title", $00108800$, #sysgui!.getAvailableContext())
        #winTitle!.addClass("winTitle")
        
        #winTaskList! = #winMain!.addChildWindow("Tasks", $00108800$, #sysgui!.getAvailableContext())
        #winTaskList!.addClass("winTasks")
        
        #labelDate! = #winTitle!.addStaticText(date(0:"%Dl, %Ml %D"))
        #labelDate!.addClass("labelDate")

        #displayTasks()
        #winMain!.setVisible(1)
        #createTaskWindow()
    methodend

    rem /**
    rem  * Create the top level window to create, view, or edit a task
    rem  */
    method protected void createTaskWindow()
        #taskProperties! = new TaskProperties()
    methodend
    
    method protected void editTask()
        #taskProperties!.setVisible(1)
    methodend
    
    method public void onCancelTaskEdit(BBjButtonPushEvent e!)
        #taskProperties!.setVisible(0)
    methodend
    rem /**
    rem  * Add a child window to the main window for each task
    rem  */
    method public void displayTasks()
        i! = #tasks!.values().iterator()
        while i!.hasNext()
            t! = i!.next()
            rem TaskWindow could be a custom object itself
            taskWin! = #winTaskList!.addChildWindow("", $00108000$, #sysgui!.getAvailableContext())
            taskWin!.addStaticText(t!.getTitle())
            checkbox! = taskWin!.addCheckBox("")
            taskWin!.addClass("task")
            taskWin!.addClass("clickable")
            taskWin!.addClass(t!.getStatusString())
            taskWin!.setCallback(BBjControl.ON_CLICK, #this!, "onTaskClick")
            taskWin!.setAttribute("id", t!.getUuid())
            checkbox!.setCallback(BBjControl.ON_CHECK_CHANGE, #this!, "onTaskCheck")
            if (t!.getStatus() = t!.STATUS_COMPLETE()) then
                checkbox!.setSelected(1)
            endif
        wend
    methodend

    rem /**
    rem  * Open an edit window to edit or create a new task
    rem  *
    rem  * @param e!    A BBjClickEvent
    rem  */
    method public void onTaskClick(BBjClickEvent e!)
        rem Only open window if it doesn't exist, this should be a field variable
        id! = e!.getControl().getAttribute("id")
        foo! = #winMain!.addChildWindow("", $00108000$, #sysgui!.getAvailableContext())
        foo!.addStaticText(id!)
    methodend

    rem /**
    rem  * Method to run when a task's checkbox is changed
    rem  *
    rem  * @param e!    A BBjCheckChangeEvent
    rem  */
    method public void onTaskCheck(BBjCheckChangeEvent e!)
        parent! = e!.getControl().getParentWindow()
        id! = parent!.getAttribute("id")
        task! = #tasks!.get(id!)
        rem Maybe move these remove styles to a separate method if we need to do it again
        parent!.removeStyle("complete")
        parent!.removeStyle("incomplete")
        parent!.removeStyle("blocked")
        parent!.removeStyle("deferred")
        if (task!.getStatus() <> task!.STATUS_COMPLETE()) then
            task!.setStatus(task!.STATUS_COMPLETE())
            parent!.addClass("complete")
        else
            task!.setStatus(task!.STATUS_INCOMPLETE())
            parent!.addClass("incomplete")
        endif
    methodend

    rem /**
    rem  * Creates sample tasks to use for a demo
    rem  *
    rem  * @param numTasks! The number of sample tasks to create
    rem  */
    method public void createSampleTasks(BBjNumber numTasks!)
        declare auto BBjString  taskName!
        declare auto Task       task!

        for i = 0 to numTasks! - 1
            taskName! = "Task " + str(i)
            task! = new Task(taskName!)
            task!.setStatus(rnd(4))

            #addTask(task!)
        next i
    methodend

    rem /**
    rem  * Adds a Task to the tasklist
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void addTask(Task task!)
        #tasks!.put(task!.getUuid(), task!)
    methodend

    rem /**
    rem  * Removes a Task from the tasklist by specifying the tasks's ID
    rem  *
    rem  * @param id        The task's unique ID
    rem  */
    method public void removeTask(BBjString id!)
        #tasks!.remove(id!)
    methodend

    rem /**
    rem  * Removes a Task from the tasklist by specifying the tasks object
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void removeTask(Task task!)
        #tasks!.remove(task!.getUuid())
    methodend

    rem /**
    rem  * Shows the app's configuration window
    rem  *
    rem  * @param task!     The Task object
    rem  */
    method public void OnShowSettings(BBjButtonPushEvent event!)
        rem To Do
        rem 1) Define the theme color
        themeColor! = "Tangerine"


        rem Create the window and controls if it doesn't yet exist.  Otherwise, we'll simply display the existing one that we created and previously hid.
        if (#winSettings! = null()) then
            #winSettings! = #sysgui!.addWindow("TaskApp Settings", $011B0010$)
            #winSettings!.addClass("winSettings")
            #winSettings!.setIcon(dsk("")+dir("")+"images/DWCTaskApp.png")

            rem Create the [Done] button that closes the settings window
            title! = #winSettings!.addStaticText("Settings", $4000$)
            title!.addClass("settingsTitle")
            settingsDone! = #winSettings!.addButton("Done")
            settingsDone!.addClass("settingsDone")

            rem Personalization
            text! = #winSettings!.addStaticText("Personalization")
            text!.addClass("settingsCategoryTitle")
            win! = #winSettings!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
            win!.addClass("settingsChildWindow")
            text! = win!.addStaticText("<html><bbj-icon pool='tabler' name='palette' class='icon'></bbj-icon>&&nbsp; Theme")
            text! = win!.addStaticText(themeColor!)
            settingsThemeColor! = win!.addButton("<html><bbj-icon pool='tabler' name='chevron-right' class='chevron'></bbj-icon>")

            rem About
            text! = #winSettings!.addStaticText("About the App")
            text!.addClass("settingsCategoryTitle")
            win! = #winSettings!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
            win!.addClass("settingsChildWindow")
            text! = win!.addStaticText("<html><bbj-icon pool='tabler' name='info-circle' class='icon'></bbj-icon>&&nbsp; About")
            settingsAbout! = win!.addButton("<html><bbj-icon pool='tabler' name='chevron-right' class='chevron'></bbj-icon>")

            rem Set the control callbacks
            settingsDone!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsDone")
            settingsThemeColor!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsThemeColor")
            settingsAbout!.setCallback(BBjButton.ON_BUTTON_PUSH, #this!, "onSettingsAbout")
        endif

        rem Since we created the window from BBj as hidden, we have to show it.
        rem The actual visibility will be a combination of BBj's setVisible() and CSS to animate the opacity.
        #winSettings!.setVisible(1)
    methodend

    method public void onSettingsDone(BBjButtonPushEvent event!)
        #winSettings!.setVisible(0)
    methodend
    method public void onSettingsThemeColor(BBjButtonPushEvent event!)
        temp = msgbox("Net Yet Implemented")
    methodend
    method public void onSettingsAbout(BBjButtonPushEvent event!)
        temp = msgbox("TaskApp is current at version 0.0!")
    methodend

classend


rem BBj USE Statements
use ::Task.bbj::Task
use ::TaskProperties.bbj::TaskProperties

rem Java USE Statements
use java.util.Date
use java.util.TreeMap